generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  imageUrl  String?
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime?  @default(now()) @map("updated_at")
  messages  Message[]
  userRooms UserRoom[]
  Room      Room[]

  @@map("users")
}

model Room {
  id        String     @id @default(uuid())
  name      String
  ownerId   String     @map("owner_id")
  imageUrl  String?
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime?  @default(now()) @map("updated_at")
  owner     User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  messages  Message[]
  userRooms UserRoom[]

  @@map("rooms")
}

model UserRoom {
  id       String   @id @default(uuid())
  userId   String   @map("user_id")
  roomId   String   @map("room_id")
  user     User     @relation(fields: [userId], references: [id])
  room     Room     @relation(fields: [roomId], references: [id])
  joinedAt DateTime @default(now()) @map("joined_at")

  @@map("user_rooms")
}

model Message {
  id         String    @id @default(uuid())
  content    String
  authorId   String    @map("author_id")
  authorName String    @map("author_name")
  roomId     String    @map("room_id")
  timeStamp  DateTime
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @default(now()) @map("updated_at")
  author     User      @relation(fields: [authorId], references: [id])
  room       Room      @relation(fields: [roomId], references: [id])

  @@map("messages")
}
